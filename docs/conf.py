#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# boar documentation build configuration file, created by
# sphinx-quickstart on Fri Feb 14 10:30:39 2020.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

from pathlib import Path
import m2r

sys.path.insert(0, os.path.abspath(".."))

from version import VERSION, RELEASE  # noqa


# -- Parse markdown to rst ------------------------------------------------


def get_root_path(module_name: str = "boar") -> Path:
    mandatory_items = [
        "pytest.ini", "LICENSE", "tests", "requirements", "Makefile", ".flake8",
        ".github", "setup.py", "version.py", "USAGE.md", ".markdownlint.json",
        "README.md", ".vscode", "docs", ".gitignore", "commitlint", ".makefile_env",
        "img", ".readthedocs.yml", "notebook", "src",
    ]

    parts = []
    for part in Path.cwd().parts:
        parts.append(part)
        sub_paths = {item.name for item in Path(*parts).iterdir()}
        if set(mandatory_items).issubset(sub_paths):
            break
    return Path(*parts)


def export_md_in_rst(frad, export_subdir="docs"):
    root_path = get_root_path()
    fmd = Path(root_path, f"{frad}.md")
    frst = Path(root_path, export_subdir, f"{frad}.rst")
    rst_str = m2r.parse_from_file(fmd)

    if frst.exists():
        frst.unlink()

    with open(frst, "w+") as rst_stream:
        rst_stream.write(rst_str)

    with open(frst, "r") as rst_stream:
        rst_str_new = rst_stream.read()
    return rst_str_new


_ = export_md_in_rst(frad="README")
_ = export_md_in_rst(frad="USAGE")
_ = export_md_in_rst(frad="POST")


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = "1.0"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "readthedocs_ext.readthedocs",
    "recommonmark",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = [".templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = [".rst", ".md"]
source_suffix = {
    ".rst": "restructuredtext",
    ".txt": "markdown",
    ".md": "markdown",
}

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "boar"
copyright = "Alexandre Cameron"
author = "Alexandre Cameron"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = RELEASE

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [".build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = [".static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    "**": [
        "relations.html",  # needs "show_related": True theme option to display
        "searchbox.html",
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "boardoc"

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "boar", "boar documentation", [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, "boar", "boar documentation",
     author, "boar", "One line description of project."),
]
